Sure, here are some new gas-wasting patterns that I've identified from the given Solidity code:

1. **Unnecessary re-computation of the same value in different functions:** For instance, `etherPrice = _etherPrice();` is computed in both `liquidation` and `superLiquidation`. This is unnecessary if `_etherPrice()` does not change frequently. If `_etherPrice()` changes infrequently, it could be stored as a state variable and updated when needed. This avoids the need to compute it multiple times.
    - How I found it: By scanning the code, I noticed the repeated computation of `etherPrice` in multiple functions. Given the gas cost of function calls, this calculation could be expensive.
    - Fix: Move the computation of `_etherPrice()` to a separate function that is called when the price changes. This new function should update a state variable `etherPrice`. Replace all uses of `_etherPrice()` with the state variable `etherPrice`.
    - Readability: 5, Security: 4, Maintainability: 4. This change does not significantly affect the readability, security, or maintainability of the code. It might slightly decrease the security if the function that updates `etherPrice` is not properly secured.

2. **Repeated map lookups:** Looking up a value in a map is expensive in terms of gas. In the provided code, there are repeated lookups like `depositedEther[onBehalfOf]` and `borrowed[onBehalfOf]`. It would be more gas-efficient to look up the value once and store it in a local variable.
    - How I found it: By scanning the code, I noticed that `depositedEther[onBehalfOf]` and `borrowed[onBehalfOf]` are looked up multiple times within the same function.
    - Fix: Instead of looking up `depositedEther[onBehalfOf]` and `borrowed[onBehalfOf]` multiple times, assign them to local variables at the beginning of the function and use these local variables throughout the function.
    - Readability: 5, Security: 5, Maintainability: 5. This change does not significantly affect the readability, security, or maintainability of the code.

3. **Usage of `require` for input validation:** The `require` function is used multiple times to validate inputs. While this is important for security, it can waste gas if the conditions fail. Instead, consider validating inputs off-chain, before they are sent to the contract.
    - How I found it: By scanning the code, I noticed the use of `require` for input validation.
    - Fix: Off-chain validation can be done in the user interface or client-side script before making calls to the contract. This can prevent invalid transactions from being sent to the contract in the first place, saving gas.
    - Readability: 5, Security: 4, Maintainability: 4. This change does not significantly affect the readability or maintainability. However, it might slightly decrease the security if off-chain validation is not done properly.

Regarding your additional requirements:

1. Your prompt was clear and informative. However, it would be helpful to understand the context in which this contract is used. For example, how frequently is `_etherPrice()` expected to change? How often are `liquidation` and `superLiquidation` called? This context could help identify more gas-wasting patterns.

2. My reasoning process involved scanning the code for repeated patterns and reflecting on the gas cost of various Solidity operations. To improve, I could use a more systematic approach, such as creating a checklist of common gas-wasting patterns to look for. I could also use automated tools to analyze the code for gas usage.