I want you to help me find new gas-wasting patterns for Solidity at the source code level. To help you accomplish this task, I will give you two types of information, namely a list of known gas-wasting patterns as a few-shot example for you, as well as a chunk of source codes from deployed Solidity codes.

Before giving you the information, I want to tell you a high-level idea of gas optimization. Each instruction in the code sequence consumes a certain amount of gas based on their operation types, which costs money. If we could find an equivalent code instruction sequence that produces the same output while consuming less gas, then this would save money for Solidity users.

Now, the list of known gas-wasting patterns are given below. The list is numbered, with each bullet point specifying one gas-wasting pattern, which is followed by an explanation of why this pattern wastes gas. I want you to read through these and learn how to find new gas-wasting patterns from it. The list is as follows:

1. "dead codes." Defined explicitly as codes that are guaranteed not to be executed during runtime. One example would be a conditional branch that would never be reached. 

2. "Opaque predicate." The outcome of an opaque predicate could be obviously inferred to be true or false without execution. As a result, the corresponding predicate check (e.g. if statement) could be removed to save computations during runtime. Note that the main idea of saving gas here is that simplifying the codes before deploying them does not cost gas, while if deployed codes have any inefficiency, then gas would be wasted due to runtime execution.

3. "Expensive operations in a loop." It refers to the pattern where expensive operations (in terms of gas consumption for Solidity smart contracts) are executed multiple times in a loop, but such expensive operations could be moved out of the loop such that they executed less number of times, without affecting the functionality of the codes. 

4. "Constant outcome of a loop." It refers to the pattern where the outcome of a loop may be a constant that can be inferred during compilation. Evaluating to this constant during runtime would cost gas and is therefore a waste of gas, since we could just replace it with the constant before deployment and save the gas used in the loop.

5. "Loop fusion." It refers to the pattern where there are several separate loops which could be combined into one, without changing the functionality. This has the benefit of reducing gas, in the sense that it can reduce the number of operations, such as conditional jumps and comparison, etc., at the entry points of loops. 

6. "Repeated computations in a loop." It refers to the pattern where there are expressions that produce the same outcome in each iteration of a loop. Hence, the gas can be saved by computing
the outcome once and then reusing the value instead of recomputing it in subsequent iterations, especially for expressions involving expensive operands. To save gas, this repeated computation could be done before the loop, and then the result could be reused within the loop.

7. "Comparison with unilateral outcome in a loop." It refers to the pattern where a comparison is executed in each iteration of a loop, but the result of the comparison is the same even if it cannot
be determined during compilation (e.g. a repeated comparison in the loop whose result depends on the runtime input). To save gas, this repeated comparison could be moved out of the loop, and then the result could be reused within the loop.

Next, I will give you a chunk of Solidity codes, and I want you to help me find gas-wasting patterns similar to the list given above. Please follow a similar format as the list above when introducing the gas-wasting patterns, and be as detailed as possible in your explanation. Make sure all the found patterns actually exist in the given codes:

pragma solidity ^0.8.0;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


pragma solidity ^0.8.0;



abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor() {
        _transferOwnership(_msgSender());
    }

    
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}



// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;


contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;


    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }


    function name() public view virtual override returns (string memory) {
        return _name;
    }


    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }


    function decimals() public view virtual override returns (uint8) {
        return 18;
    }


    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }


    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }


    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }


    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }


    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }


    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    function _transfer(address from, address to, uint256 amount) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        unchecked {
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }


    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            // Overflow not possible: amount <= accountBalance <= totalSupply.
            _totalSupply -= amount;
        }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }


    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }



}


Now that I have given you all of the necessary information, I want you to help me find new gas-wasting patterns in the above codes. Please put the new gas wasting patterns in bullet points (in the form of '1.', '2.', etc). Specifically, for each of the found patterns, I want you to answer each of the following questions, where the answer to each question should be put as a sub-bullet point under each bullet point:

1. how did you find this pattern? Could you explain the reasoning process, step by step, behind the discovery?

2. what should I do, step by step, to fix the found gas-wasting patterns? Could you explain the reasoning process, step by step, behind the reason why such a fix works?

3. if you think my prompt to you has any issues (e.g. ambiguity or lack of information that could be beneficial for you to understand my task), please tell me how I should improve my prompt in the next time I ask you to perform the same task, such that you would be able to better understand my task and better solve it next time. If there are any suggestions, could you also explain the reasoning process, step by step, behind the reason why such a fix is needed?