It's great that you're focusing on optimizing gas usage in Solidity contracts as it's a key aspect of smart contract development on Ethereum. Here are some patterns I've observed from the provided contract:

1. **Redundant checks in separate functions**

In the functions `transfer`, `transferFrom`, `approve`, `increaseApproval`, and `decreaseApproval`, there are repeated checks for `whenNotPaused`, `!frozen[_to]`, and `!frozen[msg.sender]`. These checks could be abstracted into a single internal function that gets called by these functions. 

    *How to fix*: Create a new function `checkTransferConditions(_to)` that includes these checks. Then replace the redundant code in the mentioned functions with calls to this new function.

    *Readability: 4; Security: 5; Maintainability: 4*. This increases readability by reducing code redundancy, and doesn't affect security. It slightly compromises maintainability since developers need to remember to use the new function in future functions that require these checks.

2. **Repeated access of mapping values**

In the `transferFrom` function, `allowed[_from][msg.sender]` and `balances[_from]` are each accessed twice. In Solidity, each read from a mapping is a separate SLOAD operation, which costs gas.

    *How to fix*: Store the values in temporary variables and use these variables.

    *Readability: 5; Security: 5; Maintainability: 4*. This doesn't affect readability or security, but slightly compromises maintainability since developers need to remember to use the new variables instead of accessing the mappings directly.

3. **Inefficient error messages**

The `require` statements include error messages as strings. These strings are stored in the contract's bytecode, leading to higher deployment costs. While these costs are one-time and do not affect transaction gas costs, they could be significant for large contracts.

    *How to fix*: Omit the error messages or replace them with error codes.

    *Readability: 3; Security: 5; Maintainability: 4*. This reduces readability since developers need to remember what each error code means. It doesn't affect security and slightly compromises maintainability because it's harder to understand the contract's behavior without descriptive error messages.

Regarding your additional requirements:

1. The prompt has a clear goal but could be improved by specifying whether you're interested in optimizing deployment costs, transaction costs, or both. Also, it would be useful to know whether there are any constraints, such as the need to adhere to a specific Ethereum standard (e.g., ERC20, ERC721).

2. The reasoning process involved understanding the Solidity language, the Ethereum gas model, and the provided contract. To improve, it could be useful to have more background information about the contract (e.g., its purpose, how it's used). The improvements made to the output were mainly around explaining the gas-wasting patterns clearly and providing practical solutions. The reasons for these improvements are to help you understand the issues and how to address them.